Terminals unused in grammar

   COLON
   SHIFT_RIGHT
   SHIFT_LEFT
   UNARY_PLUS


State 115 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program_element_list

    2 program_element_list: program_element_list program_element
    3                     | program_element

    4 program_element: variable_declaration SEMICOLON
    5                | function_declaration SEMICOLON
    6                | function_definition
    7                | SEMICOLON

    8 type: INT
    9     | VOID

   10 variable_declaration: variable_declaration COMMA identifier_declaration
   11                     | type identifier_declaration

   12 identifier_declaration: identifier_declaration BRACKET_OPEN NUM BRACKET_CLOSE
   13                       | ID

   14 $@1: /* empty */

   15 function_definition: type ID PARA_OPEN PARA_CLOSE BRACE_OPEN $@1 stmt_list BRACE_CLOSE
   16                    | type ID PARA_OPEN function_parameter_list PARA_CLOSE BRACE_OPEN stmt_list BRACE_CLOSE

   17 function_declaration: type ID PARA_OPEN PARA_CLOSE
   18                     | type ID PARA_OPEN function_parameter_list PARA_CLOSE

   19 function_parameter_list: function_parameter
   20                        | function_parameter_list COMMA function_parameter

   21 function_parameter: type identifier_declaration

   22 stmt_list: /* empty */
   23          | stmt_list stmt

   24 stmt: stmt_block
   25     | variable_declaration SEMICOLON
   26     | expression SEMICOLON
   27     | stmt_conditional
   28     | stmt_loop
   29     | RETURN expression SEMICOLON
   30     | RETURN SEMICOLON
   31     | SEMICOLON

   32 stmt_block: BRACE_OPEN stmt_list BRACE_CLOSE

   33 stmt_conditional: IF PARA_OPEN expression PARA_CLOSE stmt_conditional_r

   34 stmt_conditional_r: stmt
   35                   | stmt ELSE stmt

   36 stmt_loop: WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON

   38 expression: expression ASSIGN expression
   39           | expression LOGICAL_OR expression
   40           | expression LOGICAL_AND expression
   41           | LOGICAL_NOT expression
   42           | expression EQ expression
   43           | expression NE expression
   44           | expression LS expression
   45           | expression LSEQ expression
   46           | expression GTEQ expression
   47           | expression GT expression
   48           | expression PLUS expression
   49           | expression MINUS expression
   50           | expression MUL expression
   51           | MINUS expression
   52           | ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | PARA_OPEN expression PARA_CLOSE
   54           | function_call
   55           | primary

   56 primary: NUM
   57        | ID

   58 function_call: ID PARA_OPEN PARA_CLOSE
   59              | ID PARA_OPEN function_call_parameters PARA_CLOSE

   60 function_call_parameters: function_call_parameters COMMA expression
   61                         | expression


Terminals, with rules where they appear

$end (0) 0
error (256)
DO (258) 37
WHILE (259) 36 37
IF (260) 33
ELSE (261) 35
INT (262) 8
VOID (263) 9
RETURN (264) 29 30
COLON (265)
COMMA (266) 10 20 60
SEMICOLON (267) 4 5 7 25 26 29 30 31 37
BRACE_OPEN (268) 15 16 32
BRACE_CLOSE (269) 15 16 32
ID (270) 13 15 16 17 18 52 57 58 59
NUM (271) 12 56
ASSIGN (272) 38
LOGICAL_OR (273) 39
LOGICAL_AND (274) 40
NE (275) 43
EQ (276) 42
GT (277) 47
GTEQ (278) 46
LSEQ (279) 45
LS (280) 44
SHIFT_RIGHT (281)
SHIFT_LEFT (282)
MINUS (283) 49 51
PLUS (284) 48
MUL (285) 50
UNARY_PLUS (286)
UNARY_MINUS (287)
LOGICAL_NOT (288) 41
PARA_CLOSE (289) 15 16 17 18 33 36 37 53 58 59
PARA_OPEN (290) 15 16 17 18 33 36 37 53 58 59
BRACKET_CLOSE (291) 12 52
BRACKET_OPEN (292) 12 52


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
program (39)
    on left: 1, on right: 0
program_element_list (40)
    on left: 2 3, on right: 1 2
program_element (41)
    on left: 4 5 6 7, on right: 2 3
type (42)
    on left: 8 9, on right: 11 15 16 17 18 21
variable_declaration (43)
    on left: 10 11, on right: 4 10 25
identifier_declaration (44)
    on left: 12 13, on right: 10 11 12 21
function_definition (45)
    on left: 15 16, on right: 6
$@1 (46)
    on left: 14, on right: 15
function_declaration (47)
    on left: 17 18, on right: 5
function_parameter_list (48)
    on left: 19 20, on right: 16 18 20
function_parameter (49)
    on left: 21, on right: 19 20
stmt_list (50)
    on left: 22 23, on right: 15 16 23 32
stmt (51)
    on left: 24 25 26 27 28 29 30 31, on right: 23 34 35 36 37
stmt_block (52)
    on left: 32, on right: 24
stmt_conditional (53)
    on left: 33, on right: 27
stmt_conditional_r (54)
    on left: 34 35, on right: 33
stmt_loop (55)
    on left: 36 37, on right: 28
expression (56)
    on left: 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55,
    on right: 26 29 33 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
    51 53 60 61
primary (57)
    on left: 56 57, on right: 52 55
function_call (58)
    on left: 58 59, on right: 54
function_call_parameters (59)
    on left: 60 61, on right: 59 60


state 0

    0 $accept: . program $end
    1 program: . program_element_list
    2 program_element_list: . program_element_list program_element
    3                     | . program_element
    4 program_element: . variable_declaration SEMICOLON
    5                | . function_declaration SEMICOLON
    6                | . function_definition
    7                | . SEMICOLON
    8 type: . INT
    9     | . VOID
   10 variable_declaration: . variable_declaration COMMA identifier_declaration
   11                     | . type identifier_declaration
   15 function_definition: . type ID PARA_OPEN PARA_CLOSE BRACE_OPEN $@1 stmt_list BRACE_CLOSE
   16                    | . type ID PARA_OPEN function_parameter_list PARA_CLOSE BRACE_OPEN stmt_list BRACE_CLOSE
   17 function_declaration: . type ID PARA_OPEN PARA_CLOSE
   18                     | . type ID PARA_OPEN function_parameter_list PARA_CLOSE

    INT        shift, and go to state 1
    VOID       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    program               go to state 4
    program_element_list  go to state 5
    program_element       go to state 6
    type                  go to state 7
    variable_declaration  go to state 8
    function_definition   go to state 9
    function_declaration  go to state 10


state 1

    8 type: INT .

    $default  reduce using rule 8 (type)


state 2

    9 type: VOID .

    $default  reduce using rule 9 (type)


state 3

    7 program_element: SEMICOLON .

    $default  reduce using rule 7 (program_element)


state 4

    0 $accept: program . $end

    $end  shift, and go to state 11


state 5

    1 program: program_element_list .  [$end]
    2 program_element_list: program_element_list . program_element
    4 program_element: . variable_declaration SEMICOLON
    5                | . function_declaration SEMICOLON
    6                | . function_definition
    7                | . SEMICOLON
    8 type: . INT
    9     | . VOID
   10 variable_declaration: . variable_declaration COMMA identifier_declaration
   11                     | . type identifier_declaration
   15 function_definition: . type ID PARA_OPEN PARA_CLOSE BRACE_OPEN $@1 stmt_list BRACE_CLOSE
   16                    | . type ID PARA_OPEN function_parameter_list PARA_CLOSE BRACE_OPEN stmt_list BRACE_CLOSE
   17 function_declaration: . type ID PARA_OPEN PARA_CLOSE
   18                     | . type ID PARA_OPEN function_parameter_list PARA_CLOSE

    INT        shift, and go to state 1
    VOID       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    $default  reduce using rule 1 (program)

    program_element       go to state 12
    type                  go to state 7
    variable_declaration  go to state 8
    function_definition   go to state 9
    function_declaration  go to state 10


state 6

    3 program_element_list: program_element .

    $default  reduce using rule 3 (program_element_list)


state 7

   11 variable_declaration: type . identifier_declaration
   12 identifier_declaration: . identifier_declaration BRACKET_OPEN NUM BRACKET_CLOSE
   13                       | . ID
   15 function_definition: type . ID PARA_OPEN PARA_CLOSE BRACE_OPEN $@1 stmt_list BRACE_CLOSE
   16                    | type . ID PARA_OPEN function_parameter_list PARA_CLOSE BRACE_OPEN stmt_list BRACE_CLOSE
   17 function_declaration: type . ID PARA_OPEN PARA_CLOSE
   18                     | type . ID PARA_OPEN function_parameter_list PARA_CLOSE

    ID  shift, and go to state 13

    identifier_declaration  go to state 14


state 8

    4 program_element: variable_declaration . SEMICOLON
   10 variable_declaration: variable_declaration . COMMA identifier_declaration

    COMMA      shift, and go to state 15
    SEMICOLON  shift, and go to state 16


state 9

    6 program_element: function_definition .

    $default  reduce using rule 6 (program_element)


state 10

    5 program_element: function_declaration . SEMICOLON

    SEMICOLON  shift, and go to state 17


state 11

    0 $accept: program $end .

    $default  accept


state 12

    2 program_element_list: program_element_list program_element .

    $default  reduce using rule 2 (program_element_list)


state 13

   13 identifier_declaration: ID .  [COMMA, SEMICOLON, BRACKET_OPEN]
   15 function_definition: type ID . PARA_OPEN PARA_CLOSE BRACE_OPEN $@1 stmt_list BRACE_CLOSE
   16                    | type ID . PARA_OPEN function_parameter_list PARA_CLOSE BRACE_OPEN stmt_list BRACE_CLOSE
   17 function_declaration: type ID . PARA_OPEN PARA_CLOSE
   18                     | type ID . PARA_OPEN function_parameter_list PARA_CLOSE

    PARA_OPEN  shift, and go to state 18

    $default  reduce using rule 13 (identifier_declaration)


state 14

   11 variable_declaration: type identifier_declaration .  [COMMA, SEMICOLON]
   12 identifier_declaration: identifier_declaration . BRACKET_OPEN NUM BRACKET_CLOSE

    BRACKET_OPEN  shift, and go to state 19

    $default  reduce using rule 11 (variable_declaration)


state 15

   10 variable_declaration: variable_declaration COMMA . identifier_declaration
   12 identifier_declaration: . identifier_declaration BRACKET_OPEN NUM BRACKET_CLOSE
   13                       | . ID

    ID  shift, and go to state 20

    identifier_declaration  go to state 21


state 16

    4 program_element: variable_declaration SEMICOLON .

    $default  reduce using rule 4 (program_element)


state 17

    5 program_element: function_declaration SEMICOLON .

    $default  reduce using rule 5 (program_element)


state 18

    8 type: . INT
    9     | . VOID
   15 function_definition: type ID PARA_OPEN . PARA_CLOSE BRACE_OPEN $@1 stmt_list BRACE_CLOSE
   16                    | type ID PARA_OPEN . function_parameter_list PARA_CLOSE BRACE_OPEN stmt_list BRACE_CLOSE
   17 function_declaration: type ID PARA_OPEN . PARA_CLOSE
   18                     | type ID PARA_OPEN . function_parameter_list PARA_CLOSE
   19 function_parameter_list: . function_parameter
   20                        | . function_parameter_list COMMA function_parameter
   21 function_parameter: . type identifier_declaration

    INT         shift, and go to state 1
    VOID        shift, and go to state 2
    PARA_CLOSE  shift, and go to state 22

    type                     go to state 23
    function_parameter_list  go to state 24
    function_parameter       go to state 25


state 19

   12 identifier_declaration: identifier_declaration BRACKET_OPEN . NUM BRACKET_CLOSE

    NUM  shift, and go to state 26


state 20

   13 identifier_declaration: ID .

    $default  reduce using rule 13 (identifier_declaration)


state 21

   10 variable_declaration: variable_declaration COMMA identifier_declaration .  [COMMA, SEMICOLON]
   12 identifier_declaration: identifier_declaration . BRACKET_OPEN NUM BRACKET_CLOSE

    BRACKET_OPEN  shift, and go to state 19

    $default  reduce using rule 10 (variable_declaration)


state 22

   15 function_definition: type ID PARA_OPEN PARA_CLOSE . BRACE_OPEN $@1 stmt_list BRACE_CLOSE
   17 function_declaration: type ID PARA_OPEN PARA_CLOSE .  [SEMICOLON]

    BRACE_OPEN  shift, and go to state 27

    $default  reduce using rule 17 (function_declaration)


state 23

   12 identifier_declaration: . identifier_declaration BRACKET_OPEN NUM BRACKET_CLOSE
   13                       | . ID
   21 function_parameter: type . identifier_declaration

    ID  shift, and go to state 20

    identifier_declaration  go to state 28


state 24

   16 function_definition: type ID PARA_OPEN function_parameter_list . PARA_CLOSE BRACE_OPEN stmt_list BRACE_CLOSE
   18 function_declaration: type ID PARA_OPEN function_parameter_list . PARA_CLOSE
   20 function_parameter_list: function_parameter_list . COMMA function_parameter

    COMMA       shift, and go to state 29
    PARA_CLOSE  shift, and go to state 30


state 25

   19 function_parameter_list: function_parameter .

    $default  reduce using rule 19 (function_parameter_list)


state 26

   12 identifier_declaration: identifier_declaration BRACKET_OPEN NUM . BRACKET_CLOSE

    BRACKET_CLOSE  shift, and go to state 31


state 27

   14 $@1: .
   15 function_definition: type ID PARA_OPEN PARA_CLOSE BRACE_OPEN . $@1 stmt_list BRACE_CLOSE

    $default  reduce using rule 14 ($@1)

    $@1  go to state 32


state 28

   12 identifier_declaration: identifier_declaration . BRACKET_OPEN NUM BRACKET_CLOSE
   21 function_parameter: type identifier_declaration .  [COMMA, PARA_CLOSE]

    BRACKET_OPEN  shift, and go to state 19

    $default  reduce using rule 21 (function_parameter)


state 29

    8 type: . INT
    9     | . VOID
   20 function_parameter_list: function_parameter_list COMMA . function_parameter
   21 function_parameter: . type identifier_declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    type                go to state 23
    function_parameter  go to state 33


state 30

   16 function_definition: type ID PARA_OPEN function_parameter_list PARA_CLOSE . BRACE_OPEN stmt_list BRACE_CLOSE
   18 function_declaration: type ID PARA_OPEN function_parameter_list PARA_CLOSE .  [SEMICOLON]

    BRACE_OPEN  shift, and go to state 34

    $default  reduce using rule 18 (function_declaration)


state 31

   12 identifier_declaration: identifier_declaration BRACKET_OPEN NUM BRACKET_CLOSE .

    $default  reduce using rule 12 (identifier_declaration)


state 32

   15 function_definition: type ID PARA_OPEN PARA_CLOSE BRACE_OPEN $@1 . stmt_list BRACE_CLOSE
   22 stmt_list: .
   23          | . stmt_list stmt

    $default  reduce using rule 22 (stmt_list)

    stmt_list  go to state 35


state 33

   20 function_parameter_list: function_parameter_list COMMA function_parameter .

    $default  reduce using rule 20 (function_parameter_list)


state 34

   16 function_definition: type ID PARA_OPEN function_parameter_list PARA_CLOSE BRACE_OPEN . stmt_list BRACE_CLOSE
   22 stmt_list: .
   23          | . stmt_list stmt

    $default  reduce using rule 22 (stmt_list)

    stmt_list  go to state 36


state 35

    8 type: . INT
    9     | . VOID
   10 variable_declaration: . variable_declaration COMMA identifier_declaration
   11                     | . type identifier_declaration
   15 function_definition: type ID PARA_OPEN PARA_CLOSE BRACE_OPEN $@1 stmt_list . BRACE_CLOSE
   23 stmt_list: stmt_list . stmt
   24 stmt: . stmt_block
   25     | . variable_declaration SEMICOLON
   26     | . expression SEMICOLON
   27     | . stmt_conditional
   28     | . stmt_loop
   29     | . RETURN expression SEMICOLON
   30     | . RETURN SEMICOLON
   31     | . SEMICOLON
   32 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   33 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt_conditional_r
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    DO           shift, and go to state 37
    WHILE        shift, and go to state 38
    IF           shift, and go to state 39
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 40
    SEMICOLON    shift, and go to state 41
    BRACE_OPEN   shift, and go to state 42
    BRACE_CLOSE  shift, and go to state 43
    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    type                  go to state 49
    variable_declaration  go to state 50
    stmt                  go to state 51
    stmt_block            go to state 52
    stmt_conditional      go to state 53
    stmt_loop             go to state 54
    expression            go to state 55
    primary               go to state 56
    function_call         go to state 57


state 36

    8 type: . INT
    9     | . VOID
   10 variable_declaration: . variable_declaration COMMA identifier_declaration
   11                     | . type identifier_declaration
   16 function_definition: type ID PARA_OPEN function_parameter_list PARA_CLOSE BRACE_OPEN stmt_list . BRACE_CLOSE
   23 stmt_list: stmt_list . stmt
   24 stmt: . stmt_block
   25     | . variable_declaration SEMICOLON
   26     | . expression SEMICOLON
   27     | . stmt_conditional
   28     | . stmt_loop
   29     | . RETURN expression SEMICOLON
   30     | . RETURN SEMICOLON
   31     | . SEMICOLON
   32 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   33 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt_conditional_r
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    DO           shift, and go to state 37
    WHILE        shift, and go to state 38
    IF           shift, and go to state 39
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 40
    SEMICOLON    shift, and go to state 41
    BRACE_OPEN   shift, and go to state 42
    BRACE_CLOSE  shift, and go to state 58
    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    type                  go to state 49
    variable_declaration  go to state 50
    stmt                  go to state 51
    stmt_block            go to state 52
    stmt_conditional      go to state 53
    stmt_loop             go to state 54
    expression            go to state 55
    primary               go to state 56
    function_call         go to state 57


state 37

    8 type: . INT
    9     | . VOID
   10 variable_declaration: . variable_declaration COMMA identifier_declaration
   11                     | . type identifier_declaration
   24 stmt: . stmt_block
   25     | . variable_declaration SEMICOLON
   26     | . expression SEMICOLON
   27     | . stmt_conditional
   28     | . stmt_loop
   29     | . RETURN expression SEMICOLON
   30     | . RETURN SEMICOLON
   31     | . SEMICOLON
   32 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   33 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt_conditional_r
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   37          | DO . stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    DO           shift, and go to state 37
    WHILE        shift, and go to state 38
    IF           shift, and go to state 39
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 40
    SEMICOLON    shift, and go to state 41
    BRACE_OPEN   shift, and go to state 42
    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    type                  go to state 49
    variable_declaration  go to state 50
    stmt                  go to state 59
    stmt_block            go to state 52
    stmt_conditional      go to state 53
    stmt_loop             go to state 54
    expression            go to state 55
    primary               go to state 56
    function_call         go to state 57


state 38

   36 stmt_loop: WHILE . PARA_OPEN expression PARA_CLOSE stmt

    PARA_OPEN  shift, and go to state 60


state 39

   33 stmt_conditional: IF . PARA_OPEN expression PARA_CLOSE stmt_conditional_r

    PARA_OPEN  shift, and go to state 61


state 40

   29 stmt: RETURN . expression SEMICOLON
   30     | RETURN . SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    SEMICOLON    shift, and go to state 62
    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 63
    primary        go to state 56
    function_call  go to state 57


state 41

   31 stmt: SEMICOLON .

    $default  reduce using rule 31 (stmt)


state 42

   22 stmt_list: .
   23          | . stmt_list stmt
   32 stmt_block: BRACE_OPEN . stmt_list BRACE_CLOSE

    $default  reduce using rule 22 (stmt_list)

    stmt_list  go to state 64


state 43

   15 function_definition: type ID PARA_OPEN PARA_CLOSE BRACE_OPEN $@1 stmt_list BRACE_CLOSE .

    $default  reduce using rule 15 (function_definition)


state 44

   52 expression: ID . BRACKET_OPEN primary BRACKET_CLOSE
   57 primary: ID .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, MINUS, PLUS, MUL, PARA_CLOSE]
   58 function_call: ID . PARA_OPEN PARA_CLOSE
   59              | ID . PARA_OPEN function_call_parameters PARA_CLOSE

    PARA_OPEN     shift, and go to state 65
    BRACKET_OPEN  shift, and go to state 66

    $default  reduce using rule 57 (primary)


state 45

   56 primary: NUM .

    $default  reduce using rule 56 (primary)


state 46

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   51           | MINUS . expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 67
    primary        go to state 56
    function_call  go to state 57


state 47

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   41           | LOGICAL_NOT . expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 68
    primary        go to state 56
    function_call  go to state 57


state 48

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   53           | PARA_OPEN . expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 69
    primary        go to state 56
    function_call  go to state 57


state 49

   11 variable_declaration: type . identifier_declaration
   12 identifier_declaration: . identifier_declaration BRACKET_OPEN NUM BRACKET_CLOSE
   13                       | . ID

    ID  shift, and go to state 20

    identifier_declaration  go to state 14


state 50

   10 variable_declaration: variable_declaration . COMMA identifier_declaration
   25 stmt: variable_declaration . SEMICOLON

    COMMA      shift, and go to state 15
    SEMICOLON  shift, and go to state 70


state 51

   23 stmt_list: stmt_list stmt .

    $default  reduce using rule 23 (stmt_list)


state 52

   24 stmt: stmt_block .

    $default  reduce using rule 24 (stmt)


state 53

   27 stmt: stmt_conditional .

    $default  reduce using rule 27 (stmt)


state 54

   28 stmt: stmt_loop .

    $default  reduce using rule 28 (stmt)


state 55

   26 stmt: expression . SEMICOLON
   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression

    SEMICOLON    shift, and go to state 71
    ASSIGN       shift, and go to state 72
    LOGICAL_OR   shift, and go to state 73
    LOGICAL_AND  shift, and go to state 74
    NE           shift, and go to state 75
    EQ           shift, and go to state 76
    GT           shift, and go to state 77
    GTEQ         shift, and go to state 78
    LSEQ         shift, and go to state 79
    LS           shift, and go to state 80
    MINUS        shift, and go to state 81
    PLUS         shift, and go to state 82
    MUL          shift, and go to state 83


state 56

   55 expression: primary .

    $default  reduce using rule 55 (expression)


state 57

   54 expression: function_call .

    $default  reduce using rule 54 (expression)


state 58

   16 function_definition: type ID PARA_OPEN function_parameter_list PARA_CLOSE BRACE_OPEN stmt_list BRACE_CLOSE .

    $default  reduce using rule 16 (function_definition)


state 59

   37 stmt_loop: DO stmt . WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON

    WHILE  shift, and go to state 84


state 60

   36 stmt_loop: WHILE PARA_OPEN . expression PARA_CLOSE stmt
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 85
    primary        go to state 56
    function_call  go to state 57


state 61

   33 stmt_conditional: IF PARA_OPEN . expression PARA_CLOSE stmt_conditional_r
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 86
    primary        go to state 56
    function_call  go to state 57


state 62

   30 stmt: RETURN SEMICOLON .

    $default  reduce using rule 30 (stmt)


state 63

   29 stmt: RETURN expression . SEMICOLON
   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression

    SEMICOLON    shift, and go to state 87
    ASSIGN       shift, and go to state 72
    LOGICAL_OR   shift, and go to state 73
    LOGICAL_AND  shift, and go to state 74
    NE           shift, and go to state 75
    EQ           shift, and go to state 76
    GT           shift, and go to state 77
    GTEQ         shift, and go to state 78
    LSEQ         shift, and go to state 79
    LS           shift, and go to state 80
    MINUS        shift, and go to state 81
    PLUS         shift, and go to state 82
    MUL          shift, and go to state 83


state 64

    8 type: . INT
    9     | . VOID
   10 variable_declaration: . variable_declaration COMMA identifier_declaration
   11                     | . type identifier_declaration
   23 stmt_list: stmt_list . stmt
   24 stmt: . stmt_block
   25     | . variable_declaration SEMICOLON
   26     | . expression SEMICOLON
   27     | . stmt_conditional
   28     | . stmt_loop
   29     | . RETURN expression SEMICOLON
   30     | . RETURN SEMICOLON
   31     | . SEMICOLON
   32 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   32           | BRACE_OPEN stmt_list . BRACE_CLOSE
   33 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt_conditional_r
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    DO           shift, and go to state 37
    WHILE        shift, and go to state 38
    IF           shift, and go to state 39
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 40
    SEMICOLON    shift, and go to state 41
    BRACE_OPEN   shift, and go to state 42
    BRACE_CLOSE  shift, and go to state 88
    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    type                  go to state 49
    variable_declaration  go to state 50
    stmt                  go to state 51
    stmt_block            go to state 52
    stmt_conditional      go to state 53
    stmt_loop             go to state 54
    expression            go to state 55
    primary               go to state 56
    function_call         go to state 57


state 65

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   58              | ID PARA_OPEN . PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE
   59              | ID PARA_OPEN . function_call_parameters PARA_CLOSE
   60 function_call_parameters: . function_call_parameters COMMA expression
   61                         | . expression

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_CLOSE   shift, and go to state 89
    PARA_OPEN    shift, and go to state 48

    expression                go to state 90
    primary                   go to state 56
    function_call             go to state 57
    function_call_parameters  go to state 91


state 66

   52 expression: ID BRACKET_OPEN . primary BRACKET_CLOSE
   56 primary: . NUM
   57        | . ID

    ID   shift, and go to state 92
    NUM  shift, and go to state 45

    primary  go to state 93


state 67

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | MINUS expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, MINUS, PLUS, MUL, PARA_CLOSE]

    $default  reduce using rule 51 (expression)

    Conflict between rule 51 and token ASSIGN resolved as reduce (ASSIGN < UNARY_MINUS).
    Conflict between rule 51 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < UNARY_MINUS).
    Conflict between rule 51 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < UNARY_MINUS).
    Conflict between rule 51 and token NE resolved as reduce (NE < UNARY_MINUS).
    Conflict between rule 51 and token EQ resolved as reduce (EQ < UNARY_MINUS).
    Conflict between rule 51 and token GT resolved as reduce (GT < UNARY_MINUS).
    Conflict between rule 51 and token GTEQ resolved as reduce (GTEQ < UNARY_MINUS).
    Conflict between rule 51 and token LSEQ resolved as reduce (LSEQ < UNARY_MINUS).
    Conflict between rule 51 and token LS resolved as reduce (LS < UNARY_MINUS).
    Conflict between rule 51 and token MINUS resolved as reduce (MINUS < UNARY_MINUS).
    Conflict between rule 51 and token PLUS resolved as reduce (PLUS < UNARY_MINUS).
    Conflict between rule 51 and token MUL resolved as reduce (MUL < UNARY_MINUS).


state 68

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   41           | LOGICAL_NOT expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, MINUS, PLUS, MUL, PARA_CLOSE]
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression

    $default  reduce using rule 41 (expression)

    Conflict between rule 41 and token ASSIGN resolved as reduce (ASSIGN < LOGICAL_NOT).
    Conflict between rule 41 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < LOGICAL_NOT).
    Conflict between rule 41 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < LOGICAL_NOT).
    Conflict between rule 41 and token NE resolved as reduce (NE < LOGICAL_NOT).
    Conflict between rule 41 and token EQ resolved as reduce (EQ < LOGICAL_NOT).
    Conflict between rule 41 and token GT resolved as reduce (GT < LOGICAL_NOT).
    Conflict between rule 41 and token GTEQ resolved as reduce (GTEQ < LOGICAL_NOT).
    Conflict between rule 41 and token LSEQ resolved as reduce (LSEQ < LOGICAL_NOT).
    Conflict between rule 41 and token LS resolved as reduce (LS < LOGICAL_NOT).
    Conflict between rule 41 and token MINUS resolved as reduce (MINUS < LOGICAL_NOT).
    Conflict between rule 41 and token PLUS resolved as reduce (PLUS < LOGICAL_NOT).
    Conflict between rule 41 and token MUL resolved as reduce (MUL < LOGICAL_NOT).


state 69

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   53           | PARA_OPEN expression . PARA_CLOSE

    ASSIGN       shift, and go to state 72
    LOGICAL_OR   shift, and go to state 73
    LOGICAL_AND  shift, and go to state 74
    NE           shift, and go to state 75
    EQ           shift, and go to state 76
    GT           shift, and go to state 77
    GTEQ         shift, and go to state 78
    LSEQ         shift, and go to state 79
    LS           shift, and go to state 80
    MINUS        shift, and go to state 81
    PLUS         shift, and go to state 82
    MUL          shift, and go to state 83
    PARA_CLOSE   shift, and go to state 94


state 70

   25 stmt: variable_declaration SEMICOLON .

    $default  reduce using rule 25 (stmt)


state 71

   26 stmt: expression SEMICOLON .

    $default  reduce using rule 26 (stmt)


state 72

   38 expression: . expression ASSIGN expression
   38           | expression ASSIGN . expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 95
    primary        go to state 56
    function_call  go to state 57


state 73

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   39           | expression LOGICAL_OR . expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 96
    primary        go to state 56
    function_call  go to state 57


state 74

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   40           | expression LOGICAL_AND . expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 97
    primary        go to state 56
    function_call  go to state 57


state 75

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   43           | expression NE . expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 98
    primary        go to state 56
    function_call  go to state 57


state 76

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   42           | expression EQ . expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 99
    primary        go to state 56
    function_call  go to state 57


state 77

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   47           | expression GT . expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 100
    primary        go to state 56
    function_call  go to state 57


state 78

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   46           | expression GTEQ . expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 101
    primary        go to state 56
    function_call  go to state 57


state 79

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   45           | expression LSEQ . expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 102
    primary        go to state 56
    function_call  go to state 57


state 80

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   44           | expression LS . expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 103
    primary        go to state 56
    function_call  go to state 57


state 81

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   49           | expression MINUS . expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 104
    primary        go to state 56
    function_call  go to state 57


state 82

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   48           | expression PLUS . expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 105
    primary        go to state 56
    function_call  go to state 57


state 83

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   50           | expression MUL . expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 106
    primary        go to state 56
    function_call  go to state 57


state 84

   37 stmt_loop: DO stmt WHILE . PARA_OPEN expression PARA_CLOSE SEMICOLON

    PARA_OPEN  shift, and go to state 107


state 85

   36 stmt_loop: WHILE PARA_OPEN expression . PARA_CLOSE stmt
   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression

    ASSIGN       shift, and go to state 72
    LOGICAL_OR   shift, and go to state 73
    LOGICAL_AND  shift, and go to state 74
    NE           shift, and go to state 75
    EQ           shift, and go to state 76
    GT           shift, and go to state 77
    GTEQ         shift, and go to state 78
    LSEQ         shift, and go to state 79
    LS           shift, and go to state 80
    MINUS        shift, and go to state 81
    PLUS         shift, and go to state 82
    MUL          shift, and go to state 83
    PARA_CLOSE   shift, and go to state 108


state 86

   33 stmt_conditional: IF PARA_OPEN expression . PARA_CLOSE stmt_conditional_r
   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression

    ASSIGN       shift, and go to state 72
    LOGICAL_OR   shift, and go to state 73
    LOGICAL_AND  shift, and go to state 74
    NE           shift, and go to state 75
    EQ           shift, and go to state 76
    GT           shift, and go to state 77
    GTEQ         shift, and go to state 78
    LSEQ         shift, and go to state 79
    LS           shift, and go to state 80
    MINUS        shift, and go to state 81
    PLUS         shift, and go to state 82
    MUL          shift, and go to state 83
    PARA_CLOSE   shift, and go to state 109


state 87

   29 stmt: RETURN expression SEMICOLON .

    $default  reduce using rule 29 (stmt)


state 88

   32 stmt_block: BRACE_OPEN stmt_list BRACE_CLOSE .

    $default  reduce using rule 32 (stmt_block)


state 89

   58 function_call: ID PARA_OPEN PARA_CLOSE .

    $default  reduce using rule 58 (function_call)


state 90

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   61 function_call_parameters: expression .  [COMMA, PARA_CLOSE]

    ASSIGN       shift, and go to state 72
    LOGICAL_OR   shift, and go to state 73
    LOGICAL_AND  shift, and go to state 74
    NE           shift, and go to state 75
    EQ           shift, and go to state 76
    GT           shift, and go to state 77
    GTEQ         shift, and go to state 78
    LSEQ         shift, and go to state 79
    LS           shift, and go to state 80
    MINUS        shift, and go to state 81
    PLUS         shift, and go to state 82
    MUL          shift, and go to state 83

    $default  reduce using rule 61 (function_call_parameters)


state 91

   59 function_call: ID PARA_OPEN function_call_parameters . PARA_CLOSE
   60 function_call_parameters: function_call_parameters . COMMA expression

    COMMA       shift, and go to state 110
    PARA_CLOSE  shift, and go to state 111


state 92

   57 primary: ID .

    $default  reduce using rule 57 (primary)


state 93

   52 expression: ID BRACKET_OPEN primary . BRACKET_CLOSE

    BRACKET_CLOSE  shift, and go to state 112


state 94

   53 expression: PARA_OPEN expression PARA_CLOSE .

    $default  reduce using rule 53 (expression)


state 95

   38 expression: expression . ASSIGN expression
   38           | expression ASSIGN expression .  [COMMA, SEMICOLON, PARA_CLOSE]
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression

    ASSIGN       shift, and go to state 72
    LOGICAL_OR   shift, and go to state 73
    LOGICAL_AND  shift, and go to state 74
    NE           shift, and go to state 75
    EQ           shift, and go to state 76
    GT           shift, and go to state 77
    GTEQ         shift, and go to state 78
    LSEQ         shift, and go to state 79
    LS           shift, and go to state 80
    MINUS        shift, and go to state 81
    PLUS         shift, and go to state 82
    MUL          shift, and go to state 83

    $default  reduce using rule 38 (expression)

    Conflict between rule 38 and token ASSIGN resolved as shift (%right ASSIGN).
    Conflict between rule 38 and token LOGICAL_OR resolved as shift (ASSIGN < LOGICAL_OR).
    Conflict between rule 38 and token LOGICAL_AND resolved as shift (ASSIGN < LOGICAL_AND).
    Conflict between rule 38 and token NE resolved as shift (ASSIGN < NE).
    Conflict between rule 38 and token EQ resolved as shift (ASSIGN < EQ).
    Conflict between rule 38 and token GT resolved as shift (ASSIGN < GT).
    Conflict between rule 38 and token GTEQ resolved as shift (ASSIGN < GTEQ).
    Conflict between rule 38 and token LSEQ resolved as shift (ASSIGN < LSEQ).
    Conflict between rule 38 and token LS resolved as shift (ASSIGN < LS).
    Conflict between rule 38 and token MINUS resolved as shift (ASSIGN < MINUS).
    Conflict between rule 38 and token PLUS resolved as shift (ASSIGN < PLUS).
    Conflict between rule 38 and token MUL resolved as shift (ASSIGN < MUL).


state 96

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   39           | expression LOGICAL_OR expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, PARA_CLOSE]
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression

    LOGICAL_AND  shift, and go to state 74
    NE           shift, and go to state 75
    EQ           shift, and go to state 76
    GT           shift, and go to state 77
    GTEQ         shift, and go to state 78
    LSEQ         shift, and go to state 79
    LS           shift, and go to state 80
    MINUS        shift, and go to state 81
    PLUS         shift, and go to state 82
    MUL          shift, and go to state 83

    $default  reduce using rule 39 (expression)

    Conflict between rule 39 and token ASSIGN resolved as reduce (ASSIGN < LOGICAL_OR).
    Conflict between rule 39 and token LOGICAL_OR resolved as reduce (%left LOGICAL_OR).
    Conflict between rule 39 and token LOGICAL_AND resolved as shift (LOGICAL_OR < LOGICAL_AND).
    Conflict between rule 39 and token NE resolved as shift (LOGICAL_OR < NE).
    Conflict between rule 39 and token EQ resolved as shift (LOGICAL_OR < EQ).
    Conflict between rule 39 and token GT resolved as shift (LOGICAL_OR < GT).
    Conflict between rule 39 and token GTEQ resolved as shift (LOGICAL_OR < GTEQ).
    Conflict between rule 39 and token LSEQ resolved as shift (LOGICAL_OR < LSEQ).
    Conflict between rule 39 and token LS resolved as shift (LOGICAL_OR < LS).
    Conflict between rule 39 and token MINUS resolved as shift (LOGICAL_OR < MINUS).
    Conflict between rule 39 and token PLUS resolved as shift (LOGICAL_OR < PLUS).
    Conflict between rule 39 and token MUL resolved as shift (LOGICAL_OR < MUL).


state 97

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   40           | expression LOGICAL_AND expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, PARA_CLOSE]
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression

    NE     shift, and go to state 75
    EQ     shift, and go to state 76
    GT     shift, and go to state 77
    GTEQ   shift, and go to state 78
    LSEQ   shift, and go to state 79
    LS     shift, and go to state 80
    MINUS  shift, and go to state 81
    PLUS   shift, and go to state 82
    MUL    shift, and go to state 83

    $default  reduce using rule 40 (expression)

    Conflict between rule 40 and token ASSIGN resolved as reduce (ASSIGN < LOGICAL_AND).
    Conflict between rule 40 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < LOGICAL_AND).
    Conflict between rule 40 and token LOGICAL_AND resolved as reduce (%left LOGICAL_AND).
    Conflict between rule 40 and token NE resolved as shift (LOGICAL_AND < NE).
    Conflict between rule 40 and token EQ resolved as shift (LOGICAL_AND < EQ).
    Conflict between rule 40 and token GT resolved as shift (LOGICAL_AND < GT).
    Conflict between rule 40 and token GTEQ resolved as shift (LOGICAL_AND < GTEQ).
    Conflict between rule 40 and token LSEQ resolved as shift (LOGICAL_AND < LSEQ).
    Conflict between rule 40 and token LS resolved as shift (LOGICAL_AND < LS).
    Conflict between rule 40 and token MINUS resolved as shift (LOGICAL_AND < MINUS).
    Conflict between rule 40 and token PLUS resolved as shift (LOGICAL_AND < PLUS).
    Conflict between rule 40 and token MUL resolved as shift (LOGICAL_AND < MUL).


state 98

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   43           | expression NE expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, PARA_CLOSE]
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression

    GT     shift, and go to state 77
    GTEQ   shift, and go to state 78
    LSEQ   shift, and go to state 79
    LS     shift, and go to state 80
    MINUS  shift, and go to state 81
    PLUS   shift, and go to state 82
    MUL    shift, and go to state 83

    $default  reduce using rule 43 (expression)

    Conflict between rule 43 and token ASSIGN resolved as reduce (ASSIGN < NE).
    Conflict between rule 43 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < NE).
    Conflict between rule 43 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < NE).
    Conflict between rule 43 and token NE resolved as reduce (%left NE).
    Conflict between rule 43 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 43 and token GT resolved as shift (NE < GT).
    Conflict between rule 43 and token GTEQ resolved as shift (NE < GTEQ).
    Conflict between rule 43 and token LSEQ resolved as shift (NE < LSEQ).
    Conflict between rule 43 and token LS resolved as shift (NE < LS).
    Conflict between rule 43 and token MINUS resolved as shift (NE < MINUS).
    Conflict between rule 43 and token PLUS resolved as shift (NE < PLUS).
    Conflict between rule 43 and token MUL resolved as shift (NE < MUL).


state 99

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   42           | expression EQ expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, PARA_CLOSE]
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression

    GT     shift, and go to state 77
    GTEQ   shift, and go to state 78
    LSEQ   shift, and go to state 79
    LS     shift, and go to state 80
    MINUS  shift, and go to state 81
    PLUS   shift, and go to state 82
    MUL    shift, and go to state 83

    $default  reduce using rule 42 (expression)

    Conflict between rule 42 and token ASSIGN resolved as reduce (ASSIGN < EQ).
    Conflict between rule 42 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < EQ).
    Conflict between rule 42 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < EQ).
    Conflict between rule 42 and token NE resolved as reduce (%left NE).
    Conflict between rule 42 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 42 and token GT resolved as shift (EQ < GT).
    Conflict between rule 42 and token GTEQ resolved as shift (EQ < GTEQ).
    Conflict between rule 42 and token LSEQ resolved as shift (EQ < LSEQ).
    Conflict between rule 42 and token LS resolved as shift (EQ < LS).
    Conflict between rule 42 and token MINUS resolved as shift (EQ < MINUS).
    Conflict between rule 42 and token PLUS resolved as shift (EQ < PLUS).
    Conflict between rule 42 and token MUL resolved as shift (EQ < MUL).


state 100

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   47           | expression GT expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, PARA_CLOSE]
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression

    MINUS  shift, and go to state 81
    PLUS   shift, and go to state 82
    MUL    shift, and go to state 83

    $default  reduce using rule 47 (expression)

    Conflict between rule 47 and token ASSIGN resolved as reduce (ASSIGN < GT).
    Conflict between rule 47 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < GT).
    Conflict between rule 47 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < GT).
    Conflict between rule 47 and token NE resolved as reduce (NE < GT).
    Conflict between rule 47 and token EQ resolved as reduce (EQ < GT).
    Conflict between rule 47 and token GT resolved as reduce (%left GT).
    Conflict between rule 47 and token GTEQ resolved as reduce (%left GTEQ).
    Conflict between rule 47 and token LSEQ resolved as reduce (%left LSEQ).
    Conflict between rule 47 and token LS resolved as reduce (%left LS).
    Conflict between rule 47 and token MINUS resolved as shift (GT < MINUS).
    Conflict between rule 47 and token PLUS resolved as shift (GT < PLUS).
    Conflict between rule 47 and token MUL resolved as shift (GT < MUL).


state 101

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   46           | expression GTEQ expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, PARA_CLOSE]
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression

    MINUS  shift, and go to state 81
    PLUS   shift, and go to state 82
    MUL    shift, and go to state 83

    $default  reduce using rule 46 (expression)

    Conflict between rule 46 and token ASSIGN resolved as reduce (ASSIGN < GTEQ).
    Conflict between rule 46 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < GTEQ).
    Conflict between rule 46 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < GTEQ).
    Conflict between rule 46 and token NE resolved as reduce (NE < GTEQ).
    Conflict between rule 46 and token EQ resolved as reduce (EQ < GTEQ).
    Conflict between rule 46 and token GT resolved as reduce (%left GT).
    Conflict between rule 46 and token GTEQ resolved as reduce (%left GTEQ).
    Conflict between rule 46 and token LSEQ resolved as reduce (%left LSEQ).
    Conflict between rule 46 and token LS resolved as reduce (%left LS).
    Conflict between rule 46 and token MINUS resolved as shift (GTEQ < MINUS).
    Conflict between rule 46 and token PLUS resolved as shift (GTEQ < PLUS).
    Conflict between rule 46 and token MUL resolved as shift (GTEQ < MUL).


state 102

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   45           | expression LSEQ expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, PARA_CLOSE]
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression

    MINUS  shift, and go to state 81
    PLUS   shift, and go to state 82
    MUL    shift, and go to state 83

    $default  reduce using rule 45 (expression)

    Conflict between rule 45 and token ASSIGN resolved as reduce (ASSIGN < LSEQ).
    Conflict between rule 45 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < LSEQ).
    Conflict between rule 45 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < LSEQ).
    Conflict between rule 45 and token NE resolved as reduce (NE < LSEQ).
    Conflict between rule 45 and token EQ resolved as reduce (EQ < LSEQ).
    Conflict between rule 45 and token GT resolved as reduce (%left GT).
    Conflict between rule 45 and token GTEQ resolved as reduce (%left GTEQ).
    Conflict between rule 45 and token LSEQ resolved as reduce (%left LSEQ).
    Conflict between rule 45 and token LS resolved as reduce (%left LS).
    Conflict between rule 45 and token MINUS resolved as shift (LSEQ < MINUS).
    Conflict between rule 45 and token PLUS resolved as shift (LSEQ < PLUS).
    Conflict between rule 45 and token MUL resolved as shift (LSEQ < MUL).


state 103

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   44           | expression LS expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, PARA_CLOSE]
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression

    MINUS  shift, and go to state 81
    PLUS   shift, and go to state 82
    MUL    shift, and go to state 83

    $default  reduce using rule 44 (expression)

    Conflict between rule 44 and token ASSIGN resolved as reduce (ASSIGN < LS).
    Conflict between rule 44 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < LS).
    Conflict between rule 44 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < LS).
    Conflict between rule 44 and token NE resolved as reduce (NE < LS).
    Conflict between rule 44 and token EQ resolved as reduce (EQ < LS).
    Conflict between rule 44 and token GT resolved as reduce (%left GT).
    Conflict between rule 44 and token GTEQ resolved as reduce (%left GTEQ).
    Conflict between rule 44 and token LSEQ resolved as reduce (%left LSEQ).
    Conflict between rule 44 and token LS resolved as reduce (%left LS).
    Conflict between rule 44 and token MINUS resolved as shift (LS < MINUS).
    Conflict between rule 44 and token PLUS resolved as shift (LS < PLUS).
    Conflict between rule 44 and token MUL resolved as shift (LS < MUL).


state 104

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   49           | expression MINUS expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, MINUS, PLUS, PARA_CLOSE]
   50           | expression . MUL expression

    MUL  shift, and go to state 83

    $default  reduce using rule 49 (expression)

    Conflict between rule 49 and token ASSIGN resolved as reduce (ASSIGN < MINUS).
    Conflict between rule 49 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < MINUS).
    Conflict between rule 49 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < MINUS).
    Conflict between rule 49 and token NE resolved as reduce (NE < MINUS).
    Conflict between rule 49 and token EQ resolved as reduce (EQ < MINUS).
    Conflict between rule 49 and token GT resolved as reduce (GT < MINUS).
    Conflict between rule 49 and token GTEQ resolved as reduce (GTEQ < MINUS).
    Conflict between rule 49 and token LSEQ resolved as reduce (LSEQ < MINUS).
    Conflict between rule 49 and token LS resolved as reduce (LS < MINUS).
    Conflict between rule 49 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 49 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 49 and token MUL resolved as shift (MINUS < MUL).


state 105

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   48           | expression PLUS expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, MINUS, PLUS, PARA_CLOSE]
   49           | expression . MINUS expression
   50           | expression . MUL expression

    MUL  shift, and go to state 83

    $default  reduce using rule 48 (expression)

    Conflict between rule 48 and token ASSIGN resolved as reduce (ASSIGN < PLUS).
    Conflict between rule 48 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < PLUS).
    Conflict between rule 48 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < PLUS).
    Conflict between rule 48 and token NE resolved as reduce (NE < PLUS).
    Conflict between rule 48 and token EQ resolved as reduce (EQ < PLUS).
    Conflict between rule 48 and token GT resolved as reduce (GT < PLUS).
    Conflict between rule 48 and token GTEQ resolved as reduce (GTEQ < PLUS).
    Conflict between rule 48 and token LSEQ resolved as reduce (LSEQ < PLUS).
    Conflict between rule 48 and token LS resolved as reduce (LS < PLUS).
    Conflict between rule 48 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 48 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 48 and token MUL resolved as shift (PLUS < MUL).


state 106

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   50           | expression MUL expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, MINUS, PLUS, MUL, PARA_CLOSE]

    $default  reduce using rule 50 (expression)

    Conflict between rule 50 and token ASSIGN resolved as reduce (ASSIGN < MUL).
    Conflict between rule 50 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < MUL).
    Conflict between rule 50 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < MUL).
    Conflict between rule 50 and token NE resolved as reduce (NE < MUL).
    Conflict between rule 50 and token EQ resolved as reduce (EQ < MUL).
    Conflict between rule 50 and token GT resolved as reduce (GT < MUL).
    Conflict between rule 50 and token GTEQ resolved as reduce (GTEQ < MUL).
    Conflict between rule 50 and token LSEQ resolved as reduce (LSEQ < MUL).
    Conflict between rule 50 and token LS resolved as reduce (LS < MUL).
    Conflict between rule 50 and token MINUS resolved as reduce (MINUS < MUL).
    Conflict between rule 50 and token PLUS resolved as reduce (PLUS < MUL).
    Conflict between rule 50 and token MUL resolved as reduce (%left MUL).


state 107

   37 stmt_loop: DO stmt WHILE PARA_OPEN . expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 113
    primary        go to state 56
    function_call  go to state 57


state 108

    8 type: . INT
    9     | . VOID
   10 variable_declaration: . variable_declaration COMMA identifier_declaration
   11                     | . type identifier_declaration
   24 stmt: . stmt_block
   25     | . variable_declaration SEMICOLON
   26     | . expression SEMICOLON
   27     | . stmt_conditional
   28     | . stmt_loop
   29     | . RETURN expression SEMICOLON
   30     | . RETURN SEMICOLON
   31     | . SEMICOLON
   32 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   33 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt_conditional_r
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   36          | WHILE PARA_OPEN expression PARA_CLOSE . stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    DO           shift, and go to state 37
    WHILE        shift, and go to state 38
    IF           shift, and go to state 39
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 40
    SEMICOLON    shift, and go to state 41
    BRACE_OPEN   shift, and go to state 42
    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    type                  go to state 49
    variable_declaration  go to state 50
    stmt                  go to state 114
    stmt_block            go to state 52
    stmt_conditional      go to state 53
    stmt_loop             go to state 54
    expression            go to state 55
    primary               go to state 56
    function_call         go to state 57


state 109

    8 type: . INT
    9     | . VOID
   10 variable_declaration: . variable_declaration COMMA identifier_declaration
   11                     | . type identifier_declaration
   24 stmt: . stmt_block
   25     | . variable_declaration SEMICOLON
   26     | . expression SEMICOLON
   27     | . stmt_conditional
   28     | . stmt_loop
   29     | . RETURN expression SEMICOLON
   30     | . RETURN SEMICOLON
   31     | . SEMICOLON
   32 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   33 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt_conditional_r
   33                 | IF PARA_OPEN expression PARA_CLOSE . stmt_conditional_r
   34 stmt_conditional_r: . stmt
   35                   | . stmt ELSE stmt
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    DO           shift, and go to state 37
    WHILE        shift, and go to state 38
    IF           shift, and go to state 39
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 40
    SEMICOLON    shift, and go to state 41
    BRACE_OPEN   shift, and go to state 42
    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    type                  go to state 49
    variable_declaration  go to state 50
    stmt                  go to state 115
    stmt_block            go to state 52
    stmt_conditional      go to state 53
    stmt_conditional_r    go to state 116
    stmt_loop             go to state 54
    expression            go to state 55
    primary               go to state 56
    function_call         go to state 57


state 110

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE
   60 function_call_parameters: function_call_parameters COMMA . expression

    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    expression     go to state 117
    primary        go to state 56
    function_call  go to state 57


state 111

   59 function_call: ID PARA_OPEN function_call_parameters PARA_CLOSE .

    $default  reduce using rule 59 (function_call)


state 112

   52 expression: ID BRACKET_OPEN primary BRACKET_CLOSE .

    $default  reduce using rule 52 (expression)


state 113

   37 stmt_loop: DO stmt WHILE PARA_OPEN expression . PARA_CLOSE SEMICOLON
   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression

    ASSIGN       shift, and go to state 72
    LOGICAL_OR   shift, and go to state 73
    LOGICAL_AND  shift, and go to state 74
    NE           shift, and go to state 75
    EQ           shift, and go to state 76
    GT           shift, and go to state 77
    GTEQ         shift, and go to state 78
    LSEQ         shift, and go to state 79
    LS           shift, and go to state 80
    MINUS        shift, and go to state 81
    PLUS         shift, and go to state 82
    MUL          shift, and go to state 83
    PARA_CLOSE   shift, and go to state 118


state 114

   36 stmt_loop: WHILE PARA_OPEN expression PARA_CLOSE stmt .

    $default  reduce using rule 36 (stmt_loop)


state 115

   34 stmt_conditional_r: stmt .  [DO, WHILE, IF, ELSE, INT, VOID, RETURN, SEMICOLON, BRACE_OPEN, BRACE_CLOSE, ID, NUM, MINUS, LOGICAL_NOT, PARA_OPEN]
   35                   | stmt . ELSE stmt

    ELSE  shift, and go to state 119

    ELSE      [reduce using rule 34 (stmt_conditional_r)]
    $default  reduce using rule 34 (stmt_conditional_r)


state 116

   33 stmt_conditional: IF PARA_OPEN expression PARA_CLOSE stmt_conditional_r .

    $default  reduce using rule 33 (stmt_conditional)


state 117

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   60 function_call_parameters: function_call_parameters COMMA expression .  [COMMA, PARA_CLOSE]

    ASSIGN       shift, and go to state 72
    LOGICAL_OR   shift, and go to state 73
    LOGICAL_AND  shift, and go to state 74
    NE           shift, and go to state 75
    EQ           shift, and go to state 76
    GT           shift, and go to state 77
    GTEQ         shift, and go to state 78
    LSEQ         shift, and go to state 79
    LS           shift, and go to state 80
    MINUS        shift, and go to state 81
    PLUS         shift, and go to state 82
    MUL          shift, and go to state 83

    $default  reduce using rule 60 (function_call_parameters)


state 118

   37 stmt_loop: DO stmt WHILE PARA_OPEN expression PARA_CLOSE . SEMICOLON

    SEMICOLON  shift, and go to state 120


state 119

    8 type: . INT
    9     | . VOID
   10 variable_declaration: . variable_declaration COMMA identifier_declaration
   11                     | . type identifier_declaration
   24 stmt: . stmt_block
   25     | . variable_declaration SEMICOLON
   26     | . expression SEMICOLON
   27     | . stmt_conditional
   28     | . stmt_loop
   29     | . RETURN expression SEMICOLON
   30     | . RETURN SEMICOLON
   31     | . SEMICOLON
   32 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   33 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt_conditional_r
   35 stmt_conditional_r: stmt ELSE . stmt
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . MINUS expression
   52           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   53           | . PARA_OPEN expression PARA_CLOSE
   54           | . function_call
   55           | . primary
   56 primary: . NUM
   57        | . ID
   58 function_call: . ID PARA_OPEN PARA_CLOSE
   59              | . ID PARA_OPEN function_call_parameters PARA_CLOSE

    DO           shift, and go to state 37
    WHILE        shift, and go to state 38
    IF           shift, and go to state 39
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 40
    SEMICOLON    shift, and go to state 41
    BRACE_OPEN   shift, and go to state 42
    ID           shift, and go to state 44
    NUM          shift, and go to state 45
    MINUS        shift, and go to state 46
    LOGICAL_NOT  shift, and go to state 47
    PARA_OPEN    shift, and go to state 48

    type                  go to state 49
    variable_declaration  go to state 50
    stmt                  go to state 121
    stmt_block            go to state 52
    stmt_conditional      go to state 53
    stmt_loop             go to state 54
    expression            go to state 55
    primary               go to state 56
    function_call         go to state 57


state 120

   37 stmt_loop: DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON .

    $default  reduce using rule 37 (stmt_loop)


state 121

   35 stmt_conditional_r: stmt ELSE stmt .

    $default  reduce using rule 35 (stmt_conditional_r)
